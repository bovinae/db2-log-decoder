// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DB2PlugInDataSource.proto

#include "DB2PlugInDataSource.pb.h"
#include "DB2PlugInDataSource.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tapdata {

static const char* DB2ReadLogServer_method_names[] = {
  "/tapdata.DB2ReadLogServer/Ping",
  "/tapdata.DB2ReadLogServer/ServerInfo",
  "/tapdata.DB2ReadLogServer/CreateReadLogTask",
  "/tapdata.DB2ReadLogServer/DeleteReadLogTask",
  "/tapdata.DB2ReadLogServer/PauseReadLogTask",
  "/tapdata.DB2ReadLogServer/ResumeReadLogTask",
  "/tapdata.DB2ReadLogServer/ListReadLogTaskStates",
  "/tapdata.DB2ReadLogServer/GetReadLogTaskState",
  "/tapdata.DB2ReadLogServer/PullReadLog",
  "/tapdata.DB2ReadLogServer/PushReadLog",
};

std::unique_ptr< DB2ReadLogServer::Stub> DB2ReadLogServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DB2ReadLogServer::Stub> stub(new DB2ReadLogServer::Stub(channel, options));
  return stub;
}

DB2ReadLogServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(DB2ReadLogServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerInfo_(DB2ReadLogServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateReadLogTask_(DB2ReadLogServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteReadLogTask_(DB2ReadLogServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseReadLogTask_(DB2ReadLogServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeReadLogTask_(DB2ReadLogServer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListReadLogTaskStates_(DB2ReadLogServer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReadLogTaskState_(DB2ReadLogServer_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullReadLog_(DB2ReadLogServer_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PushReadLog_(DB2ReadLogServer_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DB2ReadLogServer::Stub::Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::tapdata::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::PingRequest, ::tapdata::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void DB2ReadLogServer::Stub::async::Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::PingRequest, ::tapdata::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>* DB2ReadLogServer::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::PingResponse, ::tapdata::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>* DB2ReadLogServer::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::tapdata::ServerInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::tapdata::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerInfo_, context, request, response);
}

void DB2ReadLogServer::Stub::async::ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::tapdata::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerInfo_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>* DB2ReadLogServer::Stub::PrepareAsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ServerInfoResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>* DB2ReadLogServer::Stub::AsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::tapdata::ControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::ReadLogRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateReadLogTask_, context, request, response);
}

void DB2ReadLogServer::Stub::async::CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::ReadLogRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReadLogTask_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReadLogTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::PrepareAsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ControlResponse, ::tapdata::ReadLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateReadLogTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::AsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateReadLogTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteReadLogTask_, context, request, response);
}

void DB2ReadLogServer::Stub::async::DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteReadLogTask_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteReadLogTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::PrepareAsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ControlResponse, ::tapdata::TaskHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteReadLogTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::AsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteReadLogTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseReadLogTask_, context, request, response);
}

void DB2ReadLogServer::Stub::async::PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseReadLogTask_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseReadLogTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::PrepareAsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ControlResponse, ::tapdata::TaskHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseReadLogTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::AsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseReadLogTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeReadLogTask_, context, request, response);
}

void DB2ReadLogServer::Stub::async::ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeReadLogTask_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeReadLogTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::PrepareAsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ControlResponse, ::tapdata::TaskHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeReadLogTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* DB2ReadLogServer::Stub::AsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeReadLogTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::tapdata::ListReadLogTaskStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListReadLogTaskStates_, context, request, response);
}

void DB2ReadLogServer::Stub::async::ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListReadLogTaskStates_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListReadLogTaskStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>* DB2ReadLogServer::Stub::PrepareAsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::ListReadLogTaskStatesResponse, ::tapdata::ListReadLogTaskStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListReadLogTaskStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>* DB2ReadLogServer::Stub::AsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListReadLogTaskStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DB2ReadLogServer::Stub::GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::GetReadLogTaskStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReadLogTaskState_, context, request, response);
}

void DB2ReadLogServer::Stub::async::GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReadLogTaskState_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReadLogTaskState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>* DB2ReadLogServer::Stub::PrepareAsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::GetReadLogTaskStateResponse, ::tapdata::TaskHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReadLogTaskState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>* DB2ReadLogServer::Stub::AsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReadLogTaskStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::tapdata::ReadLogResponse>* DB2ReadLogServer::Stub::PullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::tapdata::ReadLogResponse>::Create(channel_.get(), rpcmethod_PullReadLog_, context, request);
}

void DB2ReadLogServer::Stub::async::PullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::grpc::ClientReadReactor< ::tapdata::ReadLogResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tapdata::ReadLogResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PullReadLog_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>* DB2ReadLogServer::Stub::AsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tapdata::ReadLogResponse>::Create(channel_.get(), cq, rpcmethod_PullReadLog_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>* DB2ReadLogServer::Stub::PrepareAsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tapdata::ReadLogResponse>::Create(channel_.get(), cq, rpcmethod_PullReadLog_, context, request, false, nullptr);
}

::grpc::Status DB2ReadLogServer::Stub::PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::tapdata::PushReadLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushReadLog_, context, request, response);
}

void DB2ReadLogServer::Stub::async::PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushReadLog_, context, request, response, std::move(f));
}

void DB2ReadLogServer::Stub::async::PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushReadLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>* DB2ReadLogServer::Stub::PrepareAsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tapdata::PushReadLogResponse, ::tapdata::PushReadLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushReadLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>* DB2ReadLogServer::Stub::AsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushReadLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

DB2ReadLogServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::PingRequest, ::tapdata::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::PingRequest* req,
             ::tapdata::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::google::protobuf::Empty, ::tapdata::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::tapdata::ServerInfoResponse* resp) {
               return service->ServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::ReadLogRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::ReadLogRequest* req,
             ::tapdata::ControlResponse* resp) {
               return service->CreateReadLogTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::TaskHandleRequest* req,
             ::tapdata::ControlResponse* resp) {
               return service->DeleteReadLogTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::TaskHandleRequest* req,
             ::tapdata::ControlResponse* resp) {
               return service->PauseReadLogTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::TaskHandleRequest* req,
             ::tapdata::ControlResponse* resp) {
               return service->ResumeReadLogTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::ListReadLogTaskStatesRequest* req,
             ::tapdata::ListReadLogTaskStatesResponse* resp) {
               return service->ListReadLogTaskStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::TaskHandleRequest* req,
             ::tapdata::GetReadLogTaskStateResponse* resp) {
               return service->GetReadLogTaskState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DB2ReadLogServer::Service, ::tapdata::TaskHandleRequest, ::tapdata::ReadLogResponse>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::TaskHandleRequest* req,
             ::grpc::ServerWriter<::tapdata::ReadLogResponse>* writer) {
               return service->PullReadLog(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DB2ReadLogServer_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DB2ReadLogServer::Service, ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DB2ReadLogServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tapdata::PushReadLogRequest* req,
             ::tapdata::PushReadLogResponse* resp) {
               return service->PushReadLog(ctx, req, resp);
             }, this)));
}

DB2ReadLogServer::Service::~Service() {
}

::grpc::Status DB2ReadLogServer::Service::Ping(::grpc::ServerContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::ServerInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::CreateReadLogTask(::grpc::ServerContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::DeleteReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::PauseReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::ResumeReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::ListReadLogTaskStates(::grpc::ServerContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::GetReadLogTaskState(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::PullReadLog(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DB2ReadLogServer::Service::PushReadLog(::grpc::ServerContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tapdata

