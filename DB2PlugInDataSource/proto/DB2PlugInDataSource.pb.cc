// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB2PlugInDataSource.proto

#include "DB2PlugInDataSource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tapdata {
constexpr MessageHeader::MessageHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocolversion_(0){}
struct MessageHeaderDefaultTypeInternal {
  constexpr MessageHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageHeaderDefaultTypeInternal() {}
  union {
    MessageHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
constexpr PingRequest::PingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , code_(0){}
struct PingRequestDefaultTypeInternal {
  constexpr PingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingRequestDefaultTypeInternal _PingRequest_default_instance_;
constexpr PingResponse::PingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , status_(0){}
struct PingResponseDefaultTypeInternal {
  constexpr PingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingResponseDefaultTypeInternal _PingResponse_default_instance_;
constexpr ServerInfoResponse::ServerInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supportprotocolversion_()
  , _supportprotocolversion_cached_byte_size_(0)
  , supportwritertype_()
  , _supportwritertype_cached_byte_size_(0)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , serverversion_(0)
  , supportversion_(0)
{}
struct ServerInfoResponseDefaultTypeInternal {
  constexpr ServerInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoResponseDefaultTypeInternal() {}
  union {
    ServerInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoResponseDefaultTypeInternal _ServerInfoResponse_default_instance_;
constexpr ReaderSource::ReaderSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : databasename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databaseusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databasepassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databasehostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databaseservicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , databaseversion_(0)
{}
struct ReaderSourceDefaultTypeInternal {
  constexpr ReaderSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReaderSourceDefaultTypeInternal() {}
  union {
    ReaderSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReaderSourceDefaultTypeInternal _ReaderSource_default_instance_;
constexpr WriterTarget::WriterTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kafkawritertopic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kafkawriterbrokers_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct WriterTargetDefaultTypeInternal {
  constexpr WriterTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterTargetDefaultTypeInternal() {}
  union {
    WriterTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterTargetDefaultTypeInternal _WriterTarget_default_instance_;
constexpr SourceTable::SourceTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tableid_(0)
  , tablespaceid_(0){}
struct SourceTableDefaultTypeInternal {
  constexpr SourceTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SourceTableDefaultTypeInternal() {}
  union {
    SourceTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SourceTableDefaultTypeInternal _SourceTable_default_instance_;
constexpr ReadLogRequest::ReadLogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tables_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , source_(nullptr)
  , target_(nullptr)
  , stime_(int64_t{0})
  , bigendian_(false)
  , cachelri_(false)
  , timeback_(0){}
struct ReadLogRequestDefaultTypeInternal {
  constexpr ReadLogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadLogRequestDefaultTypeInternal() {}
  union {
    ReadLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadLogRequestDefaultTypeInternal _ReadLogRequest_default_instance_;
constexpr TaskHandleRequest::TaskHandleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct TaskHandleRequestDefaultTypeInternal {
  constexpr TaskHandleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskHandleRequestDefaultTypeInternal() {}
  union {
    TaskHandleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskHandleRequestDefaultTypeInternal _TaskHandleRequest_default_instance_;
constexpr ControlResponse::ControlResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , code_(0)
{}
struct ControlResponseDefaultTypeInternal {
  constexpr ControlResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlResponseDefaultTypeInternal() {}
  union {
    ControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
constexpr ReadLogTaskState::ReadLogTaskState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)
{}
struct ReadLogTaskStateDefaultTypeInternal {
  constexpr ReadLogTaskStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadLogTaskStateDefaultTypeInternal() {}
  union {
    ReadLogTaskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadLogTaskStateDefaultTypeInternal _ReadLogTaskState_default_instance_;
constexpr ListReadLogTaskStatesRequest::ListReadLogTaskStatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct ListReadLogTaskStatesRequestDefaultTypeInternal {
  constexpr ListReadLogTaskStatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListReadLogTaskStatesRequestDefaultTypeInternal() {}
  union {
    ListReadLogTaskStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListReadLogTaskStatesRequestDefaultTypeInternal _ListReadLogTaskStatesRequest_default_instance_;
constexpr ListReadLogTaskStatesResponse::ListReadLogTaskStatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskstate_()
  , header_(nullptr)
  , code_(0)
{}
struct ListReadLogTaskStatesResponseDefaultTypeInternal {
  constexpr ListReadLogTaskStatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListReadLogTaskStatesResponseDefaultTypeInternal() {}
  union {
    ListReadLogTaskStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListReadLogTaskStatesResponseDefaultTypeInternal _ListReadLogTaskStatesResponse_default_instance_;
constexpr GetReadLogTaskStateResponse::GetReadLogTaskStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskstate_()
  , header_(nullptr)
  , code_(0)
{}
struct GetReadLogTaskStateResponseDefaultTypeInternal {
  constexpr GetReadLogTaskStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadLogTaskStateResponseDefaultTypeInternal() {}
  union {
    GetReadLogTaskStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadLogTaskStateResponseDefaultTypeInternal _GetReadLogTaskStateResponse_default_instance_;
constexpr ReadLogPayload::ReadLogPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logbytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transactionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , defaultschema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tablename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , beforelogbytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pendingminscn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , op_(0)

  , tableid_(0)
  , transactiontime_(int64_t{0})
  , tablespaceid_(0){}
struct ReadLogPayloadDefaultTypeInternal {
  constexpr ReadLogPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadLogPayloadDefaultTypeInternal() {}
  union {
    ReadLogPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadLogPayloadDefaultTypeInternal _ReadLogPayload_default_instance_;
constexpr ReadLogResponse::ReadLogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_()
  , payloadversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , code_(0)
{}
struct ReadLogResponseDefaultTypeInternal {
  constexpr ReadLogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadLogResponseDefaultTypeInternal() {}
  union {
    ReadLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadLogResponseDefaultTypeInternal _ReadLogResponse_default_instance_;
constexpr PushReadLogResponse::PushReadLogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(0)

  , waittimems_(0){}
struct PushReadLogResponseDefaultTypeInternal {
  constexpr PushReadLogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushReadLogResponseDefaultTypeInternal() {}
  union {
    PushReadLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushReadLogResponseDefaultTypeInternal _PushReadLogResponse_default_instance_;
constexpr PushReadLogRequest::PushReadLogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logresponse_(nullptr){}
struct PushReadLogRequestDefaultTypeInternal {
  constexpr PushReadLogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushReadLogRequestDefaultTypeInternal() {}
  union {
    PushReadLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushReadLogRequestDefaultTypeInternal _PushReadLogRequest_default_instance_;
}  // namespace tapdata
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DB2PlugInDataSource_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DB2PlugInDataSource_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DB2PlugInDataSource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DB2PlugInDataSource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::MessageHeader, protocolversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::PingRequest, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::PingRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::PingResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::PingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::tapdata::PingResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, serverversion_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, info_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, supportversion_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, supportprotocolversion_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ServerInfoResponse, supportwritertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databaseversion_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databasename_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databaseusername_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databasepassword_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databasehostname_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReaderSource, databaseservicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::WriterTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::WriterTarget, type_),
  PROTOBUF_FIELD_OFFSET(::tapdata::WriterTarget, kafkawritertopic_),
  PROTOBUF_FIELD_OFFSET(::tapdata::WriterTarget, kafkawriterbrokers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::SourceTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::SourceTable, tableid_),
  PROTOBUF_FIELD_OFFSET(::tapdata::SourceTable, tablespaceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, bigendian_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, id_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, scn_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, stime_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, tables_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, source_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, target_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, cachelri_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogRequest, timeback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::TaskHandleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::TaskHandleRequest, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::TaskHandleRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ControlResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ControlResponse, code_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ControlResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogTaskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogTaskState, id_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogTaskState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesResponse, code_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ListReadLogTaskStatesResponse, taskstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::GetReadLogTaskStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::GetReadLogTaskStateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::GetReadLogTaskStateResponse, code_),
  PROTOBUF_FIELD_OFFSET(::tapdata::GetReadLogTaskStateResponse, taskstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, op_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, scn_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, logbytes_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, transactiontime_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, transactionid_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, tableid_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, tablespaceid_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, rid_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, defaultschema_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, schema_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, tablename_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, beforelogbytes_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogPayload, pendingminscn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogResponse, header_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogResponse, code_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogResponse, payloadversion_),
  PROTOBUF_FIELD_OFFSET(::tapdata::ReadLogResponse, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogResponse, code_),
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogResponse, waittimems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogRequest, id_),
  PROTOBUF_FIELD_OFFSET(::tapdata::PushReadLogRequest, logresponse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tapdata::MessageHeader)},
  { 7, -1, -1, sizeof(::tapdata::PingRequest)},
  { 15, -1, -1, sizeof(::tapdata::PingResponse)},
  { 24, -1, -1, sizeof(::tapdata::ServerInfoResponse)},
  { 36, -1, -1, sizeof(::tapdata::ReaderSource)},
  { 48, -1, -1, sizeof(::tapdata::WriterTarget)},
  { 57, -1, -1, sizeof(::tapdata::SourceTable)},
  { 65, -1, -1, sizeof(::tapdata::ReadLogRequest)},
  { 81, -1, -1, sizeof(::tapdata::TaskHandleRequest)},
  { 89, -1, -1, sizeof(::tapdata::ControlResponse)},
  { 98, -1, -1, sizeof(::tapdata::ReadLogTaskState)},
  { 106, -1, -1, sizeof(::tapdata::ListReadLogTaskStatesRequest)},
  { 113, -1, -1, sizeof(::tapdata::ListReadLogTaskStatesResponse)},
  { 122, -1, -1, sizeof(::tapdata::GetReadLogTaskStateResponse)},
  { 131, -1, -1, sizeof(::tapdata::ReadLogPayload)},
  { 150, -1, -1, sizeof(::tapdata::ReadLogResponse)},
  { 160, -1, -1, sizeof(::tapdata::PushReadLogResponse)},
  { 168, -1, -1, sizeof(::tapdata::PushReadLogRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ServerInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ReaderSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_WriterTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_SourceTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ReadLogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_TaskHandleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ReadLogTaskState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ListReadLogTaskStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ListReadLogTaskStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_GetReadLogTaskStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ReadLogPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_ReadLogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_PushReadLogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapdata::_PushReadLogRequest_default_instance_),
};

const char descriptor_table_protodef_DB2PlugInDataSource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031DB2PlugInDataSource.proto\022\007tapdata\032\033go"
  "ogle/protobuf/empty.proto\"(\n\rMessageHead"
  "er\022\027\n\017ProtocolVersion\030\001 \001(\005\"C\n\013PingReque"
  "st\022&\n\006header\030\001 \001(\0132\026.tapdata.MessageHead"
  "er\022\014\n\004code\030\002 \001(\005\"S\n\014PingResponse\022&\n\006head"
  "er\030\001 \001(\0132\026.tapdata.MessageHeader\022\016\n\006stat"
  "us\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"\337\001\n\022ServerInfoResp"
  "onse\022&\n\006header\030\001 \001(\0132\026.tapdata.MessageHe"
  "ader\022\025\n\rserverVersion\030\002 \001(\005\022\014\n\004info\030\003 \001("
  "\t\022,\n\016supportVersion\030\004 \001(\0162\024.tapdata.DB2V"
  "eresion\022\036\n\026supportProtocolVersion\030\005 \003(\005\022"
  ".\n\021supportWriterType\030\006 \003(\0162\023.tapdata.Wri"
  "terType\"\276\001\n\014ReaderSource\022-\n\017databaseVers"
  "ion\030\001 \001(\0162\024.tapdata.DB2Veresion\022\024\n\014datab"
  "aseName\030\002 \001(\t\022\030\n\020databaseUsername\030\003 \001(\t\022"
  "\030\n\020databasePassword\030\004 \001(\t\022\030\n\020databaseHos"
  "tname\030\005 \001(\t\022\033\n\023databaseServiceName\030\006 \001(\t"
  "\"g\n\014WriterTarget\022!\n\004type\030\001 \001(\0162\023.tapdata"
  ".WriterType\022\030\n\020kafkaWriterTopic\030\002 \001(\t\022\032\n"
  "\022kafkaWriterBrokers\030\003 \001(\t\"4\n\013SourceTable"
  "\022\017\n\007tableId\030\001 \001(\005\022\024\n\014tableSpaceId\030\002 \001(\005\""
  "\213\002\n\016ReadLogRequest\022&\n\006header\030\001 \001(\0132\026.tap"
  "data.MessageHeader\022\021\n\tbigEndian\030\002 \001(\010\022\n\n"
  "\002id\030\003 \001(\t\022\013\n\003scn\030\004 \001(\t\022\r\n\005stime\030\005 \001(\003\022$\n"
  "\006tables\030\006 \003(\0132\024.tapdata.SourceTable\022%\n\006s"
  "ource\030\007 \001(\0132\025.tapdata.ReaderSource\022%\n\006ta"
  "rget\030\010 \001(\0132\025.tapdata.WriterTarget\022\020\n\010cac"
  "heLri\030\t \001(\010\022\020\n\010timeBack\030\n \001(\005\"G\n\021TaskHan"
  "dleRequest\022&\n\006header\030\001 \001(\0132\026.tapdata.Mes"
  "sageHeader\022\n\n\002id\030\002 \001(\t\"k\n\017ControlRespons"
  "e\022&\n\006header\030\001 \001(\0132\026.tapdata.MessageHeade"
  "r\022#\n\004code\030\002 \001(\0162\025.tapdata.ResponseCode\022\013"
  "\n\003msg\030\003 \001(\t\"A\n\020ReadLogTaskState\022\n\n\002id\030\001 "
  "\001(\t\022!\n\005state\030\002 \001(\0162\022.tapdata.TaskState\"F"
  "\n\034ListReadLogTaskStatesRequest\022&\n\006header"
  "\030\001 \001(\0132\026.tapdata.MessageHeader\"\232\001\n\035ListR"
  "eadLogTaskStatesResponse\022&\n\006header\030\001 \001(\013"
  "2\026.tapdata.MessageHeader\022#\n\004code\030\002 \001(\0162\025"
  ".tapdata.ResponseCode\022,\n\ttaskState\030\003 \003(\013"
  "2\031.tapdata.ReadLogTaskState\"\230\001\n\033GetReadL"
  "ogTaskStateResponse\022&\n\006header\030\001 \001(\0132\026.ta"
  "pdata.MessageHeader\022#\n\004code\030\002 \001(\0162\025.tapd"
  "ata.ResponseCode\022,\n\ttaskState\030\003 \003(\0132\031.ta"
  "pdata.ReadLogTaskState\"\234\002\n\016ReadLogPayloa"
  "d\022\036\n\002op\030\001 \001(\0162\022.tapdata.ReadLogOp\022\013\n\003scn"
  "\030\002 \001(\t\022\020\n\010logBytes\030\003 \001(\014\022\027\n\017transactionT"
  "ime\030\004 \001(\003\022\025\n\rtransactionId\030\005 \001(\t\022\017\n\007tabl"
  "eId\030\006 \001(\005\022\024\n\014tableSpaceId\030\007 \001(\005\022\013\n\003rid\030\010"
  " \001(\t\022\025\n\rdefaultSchema\030\t \001(\t\022\016\n\006schema\030\n "
  "\001(\t\022\021\n\ttableName\030\013 \001(\t\022\026\n\016beforeLogBytes"
  "\030\014 \001(\014\022\025\n\rpendingMinScn\030\r \001(\t\"\240\001\n\017ReadLo"
  "gResponse\022&\n\006header\030\001 \001(\0132\026.tapdata.Mess"
  "ageHeader\022#\n\004code\030\002 \001(\0162\025.tapdata.Respon"
  "seCode\022\026\n\016payloadVersion\030\003 \001(\t\022(\n\007payloa"
  "d\030\004 \003(\0132\027.tapdata.ReadLogPayload\"R\n\023Push"
  "ReadLogResponse\022\'\n\004code\030\001 \001(\0162\031.tapdata."
  "PushResponseCode\022\022\n\nwaitTimeMS\030\002 \001(\005\"O\n\022"
  "PushReadLogRequest\022\n\n\002id\030\001 \001(\t\022-\n\013logRes"
  "ponse\030\002 \001(\0132\030.tapdata.ReadLogResponse*!\n"
  "\nWriterType\022\010\n\004GRPC\020\000\022\t\n\005KAFKA\020\001*(\n\013DB2V"
  "eresion\022\010\n\004AUTO\020\000\022\006\n\002V9\020\001\022\007\n\003V10\020\002*\262\001\n\014R"
  "esponseCode\022\006\n\002OK\020\000\022\021\n\rINVALID_PARAM\020\001\022\022"
  "\n\016ALREADY_CREATE\020\002\022\r\n\tNOT_EXIST\020\003\022\n\n\006PAU"
  "SED\020\004\022\013\n\007RUNNING\020\005\022\025\n\021STOP_BY_EXCEPTION\020"
  "\006\022\017\n\013NOT_SUPPORT\020\007\022\021\n\rSHUTTING_DOWN\020\010\022\020\n"
  "\014PASSIVE_STOP\020\t*J\n\tTaskState\022\020\n\014TASK_RUN"
  "NING\020\000\022\017\n\013TASK_PAUSED\020\001\022\032\n\026TASK_STOP_BY_"
  "EXCEPTION\020\002*n\n\tReadLogOp\022\013\n\007UNKNOWN\020\000\022\014\n"
  "\010ROLLBACK\020\001\022\n\n\006COMMIT\020\002\022\n\n\006INSERT\020\003\022\n\n\006U"
  "PDATE\020\004\022\n\n\006DELETE\020\005\022\007\n\003DDL\020\006\022\r\n\tHEARTBEA"
  "T\020\007*\?\n\020PushResponseCode\022\013\n\007PUSH_OK\020\000\022\r\n\t"
  "PUSH_STOP\020\001\022\017\n\013PUSH_PAUSED\020\0022\230\006\n\020DB2Read"
  "LogServer\0225\n\004Ping\022\024.tapdata.PingRequest\032"
  "\025.tapdata.PingResponse\"\000\022C\n\nServerInfo\022\026"
  ".google.protobuf.Empty\032\033.tapdata.ServerI"
  "nfoResponse\"\000\022H\n\021CreateReadLogTask\022\027.tap"
  "data.ReadLogRequest\032\030.tapdata.ControlRes"
  "ponse\"\000\022K\n\021DeleteReadLogTask\022\032.tapdata.T"
  "askHandleRequest\032\030.tapdata.ControlRespon"
  "se\"\000\022J\n\020PauseReadLogTask\022\032.tapdata.TaskH"
  "andleRequest\032\030.tapdata.ControlResponse\"\000"
  "\022K\n\021ResumeReadLogTask\022\032.tapdata.TaskHand"
  "leRequest\032\030.tapdata.ControlResponse\"\000\022h\n"
  "\025ListReadLogTaskStates\022%.tapdata.ListRea"
  "dLogTaskStatesRequest\032&.tapdata.ListRead"
  "LogTaskStatesResponse\"\000\022Y\n\023GetReadLogTas"
  "kState\022\032.tapdata.TaskHandleRequest\032$.tap"
  "data.GetReadLogTaskStateResponse\"\000\022G\n\013Pu"
  "llReadLog\022\032.tapdata.TaskHandleRequest\032\030."
  "tapdata.ReadLogResponse\"\0000\001\022J\n\013PushReadL"
  "og\022\033.tapdata.PushReadLogRequest\032\034.tapdat"
  "a.PushReadLogResponse\"\000B-\n\023io.tapdata.da"
  "ta.db2B\017ProtoDB2ReadLogP\001\242\002\002PDb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DB2PlugInDataSource_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DB2PlugInDataSource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DB2PlugInDataSource_2eproto = {
  false, false, 3718, descriptor_table_protodef_DB2PlugInDataSource_2eproto, "DB2PlugInDataSource.proto", 
  &descriptor_table_DB2PlugInDataSource_2eproto_once, descriptor_table_DB2PlugInDataSource_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_DB2PlugInDataSource_2eproto::offsets,
  file_level_metadata_DB2PlugInDataSource_2eproto, file_level_enum_descriptors_DB2PlugInDataSource_2eproto, file_level_service_descriptors_DB2PlugInDataSource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DB2PlugInDataSource_2eproto_getter() {
  return &descriptor_table_DB2PlugInDataSource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DB2PlugInDataSource_2eproto(&descriptor_table_DB2PlugInDataSource_2eproto);
namespace tapdata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[0];
}
bool WriterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DB2Veresion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[1];
}
bool DB2Veresion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[2];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[3];
}
bool TaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadLogOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[4];
}
bool ReadLogOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PushResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DB2PlugInDataSource_2eproto);
  return file_level_enum_descriptors_DB2PlugInDataSource_2eproto[5];
}
bool PushResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MessageHeader::_Internal {
 public:
};

MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocolversion_ = from.protocolversion_;
  // @@protoc_insertion_point(copy_constructor:tapdata.MessageHeader)
}

void MessageHeader::SharedCtor() {
protocolversion_ = 0;
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:tapdata.MessageHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessageHeader::ArenaDtor(void* object) {
  MessageHeader* _this = reinterpret_cast< MessageHeader* >(object);
  (void)_this;
}
void MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocolversion_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ProtocolVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocolversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->_internal_protocolversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protocolversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->_internal_protocolversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_protocolversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageHeader::GetClassData() const { return &_class_data_; }

void MessageHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageHeader *>(to)->MergeFrom(
      static_cast<const MessageHeader &>(from));
}


void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protocolversion() != 0) {
    _internal_set_protocolversion(from._internal_protocolversion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(protocolversion_, other->protocolversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[0]);
}

// ===================================================================

class PingRequest::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const PingRequest* msg);
};

const ::tapdata::MessageHeader&
PingRequest::_Internal::header(const PingRequest* msg) {
  return *msg->header_;
}
PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tapdata.PingRequest)
}

void PingRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:tapdata.PingRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PingRequest::ArenaDtor(void* object) {
  PingRequest* _this = reinterpret_cast< PingRequest* >(object);
  (void)_this;
}
void PingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.PingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }

void PingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingRequest *>(to)->MergeFrom(
      static_cast<const PingRequest &>(from));
}


void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingRequest, code_)
      + sizeof(PingRequest::code_)
      - PROTOBUF_FIELD_OFFSET(PingRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[1]);
}

// ===================================================================

class PingResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const PingResponse* msg);
};

const ::tapdata::MessageHeader&
PingResponse::_Internal::header(const PingResponse* msg) {
  return *msg->header_;
}
PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tapdata.PingResponse)
}

void PingResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:tapdata.PingResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void PingResponse::ArenaDtor(void* object) {
  PingResponse* _this = reinterpret_cast< PingResponse* >(object);
  (void)_this;
}
void PingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.PingResponse.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.PingResponse.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.PingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }

void PingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingResponse *>(to)->MergeFrom(
      static_cast<const PingResponse &>(from));
}


void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingResponse, status_)
      + sizeof(PingResponse::status_)
      - PROTOBUF_FIELD_OFFSET(PingResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[2]);
}

// ===================================================================

class ServerInfoResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ServerInfoResponse* msg);
};

const ::tapdata::MessageHeader&
ServerInfoResponse::_Internal::header(const ServerInfoResponse* msg) {
  return *msg->header_;
}
ServerInfoResponse::ServerInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supportprotocolversion_(arena),
  supportwritertype_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ServerInfoResponse)
}
ServerInfoResponse::ServerInfoResponse(const ServerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supportprotocolversion_(from.supportprotocolversion_),
      supportwritertype_(from.supportwritertype_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&serverversion_, &from.serverversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&supportversion_) -
    reinterpret_cast<char*>(&serverversion_)) + sizeof(supportversion_));
  // @@protoc_insertion_point(copy_constructor:tapdata.ServerInfoResponse)
}

void ServerInfoResponse::SharedCtor() {
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&supportversion_) -
    reinterpret_cast<char*>(&header_)) + sizeof(supportversion_));
}

ServerInfoResponse::~ServerInfoResponse() {
  // @@protoc_insertion_point(destructor:tapdata.ServerInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ServerInfoResponse::ArenaDtor(void* object) {
  ServerInfoResponse* _this = reinterpret_cast< ServerInfoResponse* >(object);
  (void)_this;
}
void ServerInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supportprotocolversion_.Clear();
  supportwritertype_.Clear();
  info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&serverversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supportversion_) -
      reinterpret_cast<char*>(&serverversion_)) + sizeof(supportversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serverVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ServerInfoResponse.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.DB2Veresion supportVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_supportversion(static_cast<::tapdata::DB2Veresion>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 supportProtocolVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_supportprotocolversion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_supportprotocolversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tapdata.WriterType supportWriterType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_supportwritertype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_supportwritertype(static_cast<::tapdata::WriterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 serverVersion = 2;
  if (this->_internal_serverversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serverversion(), target);
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ServerInfoResponse.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  // .tapdata.DB2Veresion supportVersion = 4;
  if (this->_internal_supportversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_supportversion(), target);
  }

  // repeated int32 supportProtocolVersion = 5;
  {
    int byte_size = _supportprotocolversion_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_supportprotocolversion(), byte_size, target);
    }
  }

  // repeated .tapdata.WriterType supportWriterType = 6;
  {
    int byte_size = _supportwritertype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, supportwritertype_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ServerInfoResponse)
  return target;
}

size_t ServerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ServerInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 supportProtocolVersion = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->supportprotocolversion_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supportprotocolversion_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .tapdata.WriterType supportWriterType = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supportwritertype_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supportwritertype(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supportwritertype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 serverVersion = 2;
  if (this->_internal_serverversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serverversion());
  }

  // .tapdata.DB2Veresion supportVersion = 4;
  if (this->_internal_supportversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_supportversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfoResponse::GetClassData() const { return &_class_data_; }

void ServerInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerInfoResponse *>(to)->MergeFrom(
      static_cast<const ServerInfoResponse &>(from));
}


void ServerInfoResponse::MergeFrom(const ServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ServerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supportprotocolversion_.MergeFrom(from.supportprotocolversion_);
  supportwritertype_.MergeFrom(from.supportwritertype_);
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_serverversion() != 0) {
    _internal_set_serverversion(from._internal_serverversion());
  }
  if (from._internal_supportversion() != 0) {
    _internal_set_supportversion(from._internal_supportversion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfoResponse::CopyFrom(const ServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoResponse::IsInitialized() const {
  return true;
}

void ServerInfoResponse::InternalSwap(ServerInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supportprotocolversion_.InternalSwap(&other->supportprotocolversion_);
  supportwritertype_.InternalSwap(&other->supportwritertype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfoResponse, supportversion_)
      + sizeof(ServerInfoResponse::supportversion_)
      - PROTOBUF_FIELD_OFFSET(ServerInfoResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[3]);
}

// ===================================================================

class ReaderSource::_Internal {
 public:
};

ReaderSource::ReaderSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ReaderSource)
}
ReaderSource::ReaderSource(const ReaderSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  databasename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databasename().empty()) {
    databasename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databasename(), 
      GetArenaForAllocation());
  }
  databaseusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databaseusername().empty()) {
    databaseusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databaseusername(), 
      GetArenaForAllocation());
  }
  databasepassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databasepassword().empty()) {
    databasepassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databasepassword(), 
      GetArenaForAllocation());
  }
  databasehostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databasehostname().empty()) {
    databasehostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databasehostname(), 
      GetArenaForAllocation());
  }
  databaseservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databaseservicename().empty()) {
    databaseservicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_databaseservicename(), 
      GetArenaForAllocation());
  }
  databaseversion_ = from.databaseversion_;
  // @@protoc_insertion_point(copy_constructor:tapdata.ReaderSource)
}

void ReaderSource::SharedCtor() {
databasename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
databaseusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
databasepassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
databasehostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
databaseservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
databaseversion_ = 0;
}

ReaderSource::~ReaderSource() {
  // @@protoc_insertion_point(destructor:tapdata.ReaderSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReaderSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  databasename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  databaseusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  databasepassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  databasehostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  databaseservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReaderSource::ArenaDtor(void* object) {
  ReaderSource* _this = reinterpret_cast< ReaderSource* >(object);
  (void)_this;
}
void ReaderSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReaderSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReaderSource::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ReaderSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  databasename_.ClearToEmpty();
  databaseusername_.ClearToEmpty();
  databasepassword_.ClearToEmpty();
  databasehostname_.ClearToEmpty();
  databaseservicename_.ClearToEmpty();
  databaseversion_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReaderSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.DB2Veresion databaseVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_databaseversion(static_cast<::tapdata::DB2Veresion>(val));
        } else
          goto handle_unusual;
        continue;
      // string databaseName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_databasename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReaderSource.databaseName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string databaseUsername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_databaseusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReaderSource.databaseUsername"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string databasePassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_databasepassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReaderSource.databasePassword"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string databaseHostname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_databasehostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReaderSource.databaseHostname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string databaseServiceName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_databaseservicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReaderSource.databaseServiceName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReaderSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ReaderSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.DB2Veresion databaseVersion = 1;
  if (this->_internal_databaseversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_databaseversion(), target);
  }

  // string databaseName = 2;
  if (!this->_internal_databasename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databasename().data(), static_cast<int>(this->_internal_databasename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReaderSource.databaseName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_databasename(), target);
  }

  // string databaseUsername = 3;
  if (!this->_internal_databaseusername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databaseusername().data(), static_cast<int>(this->_internal_databaseusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReaderSource.databaseUsername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_databaseusername(), target);
  }

  // string databasePassword = 4;
  if (!this->_internal_databasepassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databasepassword().data(), static_cast<int>(this->_internal_databasepassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReaderSource.databasePassword");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_databasepassword(), target);
  }

  // string databaseHostname = 5;
  if (!this->_internal_databasehostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databasehostname().data(), static_cast<int>(this->_internal_databasehostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReaderSource.databaseHostname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_databasehostname(), target);
  }

  // string databaseServiceName = 6;
  if (!this->_internal_databaseservicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databaseservicename().data(), static_cast<int>(this->_internal_databaseservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReaderSource.databaseServiceName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_databaseservicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ReaderSource)
  return target;
}

size_t ReaderSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ReaderSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string databaseName = 2;
  if (!this->_internal_databasename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databasename());
  }

  // string databaseUsername = 3;
  if (!this->_internal_databaseusername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databaseusername());
  }

  // string databasePassword = 4;
  if (!this->_internal_databasepassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databasepassword());
  }

  // string databaseHostname = 5;
  if (!this->_internal_databasehostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databasehostname());
  }

  // string databaseServiceName = 6;
  if (!this->_internal_databaseservicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databaseservicename());
  }

  // .tapdata.DB2Veresion databaseVersion = 1;
  if (this->_internal_databaseversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_databaseversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReaderSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReaderSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReaderSource::GetClassData() const { return &_class_data_; }

void ReaderSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReaderSource *>(to)->MergeFrom(
      static_cast<const ReaderSource &>(from));
}


void ReaderSource::MergeFrom(const ReaderSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ReaderSource)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_databasename().empty()) {
    _internal_set_databasename(from._internal_databasename());
  }
  if (!from._internal_databaseusername().empty()) {
    _internal_set_databaseusername(from._internal_databaseusername());
  }
  if (!from._internal_databasepassword().empty()) {
    _internal_set_databasepassword(from._internal_databasepassword());
  }
  if (!from._internal_databasehostname().empty()) {
    _internal_set_databasehostname(from._internal_databasehostname());
  }
  if (!from._internal_databaseservicename().empty()) {
    _internal_set_databaseservicename(from._internal_databaseservicename());
  }
  if (from._internal_databaseversion() != 0) {
    _internal_set_databaseversion(from._internal_databaseversion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReaderSource::CopyFrom(const ReaderSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ReaderSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReaderSource::IsInitialized() const {
  return true;
}

void ReaderSource::InternalSwap(ReaderSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databasename_, lhs_arena,
      &other->databasename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databaseusername_, lhs_arena,
      &other->databaseusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databasepassword_, lhs_arena,
      &other->databasepassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databasehostname_, lhs_arena,
      &other->databasehostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &databaseservicename_, lhs_arena,
      &other->databaseservicename_, rhs_arena
  );
  swap(databaseversion_, other->databaseversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReaderSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[4]);
}

// ===================================================================

class WriterTarget::_Internal {
 public:
};

WriterTarget::WriterTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.WriterTarget)
}
WriterTarget::WriterTarget(const WriterTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kafkawritertopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kafkawritertopic().empty()) {
    kafkawritertopic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kafkawritertopic(), 
      GetArenaForAllocation());
  }
  kafkawriterbrokers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kafkawriterbrokers().empty()) {
    kafkawriterbrokers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kafkawriterbrokers(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tapdata.WriterTarget)
}

void WriterTarget::SharedCtor() {
kafkawritertopic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kafkawriterbrokers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

WriterTarget::~WriterTarget() {
  // @@protoc_insertion_point(destructor:tapdata.WriterTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kafkawritertopic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kafkawriterbrokers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriterTarget::ArenaDtor(void* object) {
  WriterTarget* _this = reinterpret_cast< WriterTarget* >(object);
  (void)_this;
}
void WriterTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.WriterTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kafkawritertopic_.ClearToEmpty();
  kafkawriterbrokers_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.WriterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tapdata::WriterType>(val));
        } else
          goto handle_unusual;
        continue;
      // string kafkaWriterTopic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kafkawritertopic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.WriterTarget.kafkaWriterTopic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string kafkaWriterBrokers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kafkawriterbrokers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.WriterTarget.kafkaWriterBrokers"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.WriterTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.WriterType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string kafkaWriterTopic = 2;
  if (!this->_internal_kafkawritertopic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kafkawritertopic().data(), static_cast<int>(this->_internal_kafkawritertopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.WriterTarget.kafkaWriterTopic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kafkawritertopic(), target);
  }

  // string kafkaWriterBrokers = 3;
  if (!this->_internal_kafkawriterbrokers().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kafkawriterbrokers().data(), static_cast<int>(this->_internal_kafkawriterbrokers().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.WriterTarget.kafkaWriterBrokers");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_kafkawriterbrokers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.WriterTarget)
  return target;
}

size_t WriterTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.WriterTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kafkaWriterTopic = 2;
  if (!this->_internal_kafkawritertopic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kafkawritertopic());
  }

  // string kafkaWriterBrokers = 3;
  if (!this->_internal_kafkawriterbrokers().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kafkawriterbrokers());
  }

  // .tapdata.WriterType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterTarget::GetClassData() const { return &_class_data_; }

void WriterTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterTarget *>(to)->MergeFrom(
      static_cast<const WriterTarget &>(from));
}


void WriterTarget::MergeFrom(const WriterTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.WriterTarget)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kafkawritertopic().empty()) {
    _internal_set_kafkawritertopic(from._internal_kafkawritertopic());
  }
  if (!from._internal_kafkawriterbrokers().empty()) {
    _internal_set_kafkawriterbrokers(from._internal_kafkawriterbrokers());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterTarget::CopyFrom(const WriterTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.WriterTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterTarget::IsInitialized() const {
  return true;
}

void WriterTarget::InternalSwap(WriterTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kafkawritertopic_, lhs_arena,
      &other->kafkawritertopic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kafkawriterbrokers_, lhs_arena,
      &other->kafkawriterbrokers_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[5]);
}

// ===================================================================

class SourceTable::_Internal {
 public:
};

SourceTable::SourceTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.SourceTable)
}
SourceTable::SourceTable(const SourceTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tableid_, &from.tableid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tablespaceid_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(tablespaceid_));
  // @@protoc_insertion_point(copy_constructor:tapdata.SourceTable)
}

void SourceTable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tableid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tablespaceid_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(tablespaceid_));
}

SourceTable::~SourceTable() {
  // @@protoc_insertion_point(destructor:tapdata.SourceTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SourceTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SourceTable::ArenaDtor(void* object) {
  SourceTable* _this = reinterpret_cast< SourceTable* >(object);
  (void)_this;
}
void SourceTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SourceTable::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.SourceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tableid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tablespaceid_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(tablespaceid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableSpaceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tablespaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.SourceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableId = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // int32 tableSpaceId = 2;
  if (this->_internal_tablespaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tablespaceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.SourceTable)
  return target;
}

size_t SourceTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.SourceTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tableId = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  // int32 tableSpaceId = 2;
  if (this->_internal_tablespaceid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tablespaceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SourceTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceTable::GetClassData() const { return &_class_data_; }

void SourceTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SourceTable *>(to)->MergeFrom(
      static_cast<const SourceTable &>(from));
}


void SourceTable::MergeFrom(const SourceTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.SourceTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from._internal_tablespaceid() != 0) {
    _internal_set_tablespaceid(from._internal_tablespaceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceTable::CopyFrom(const SourceTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.SourceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceTable::IsInitialized() const {
  return true;
}

void SourceTable::InternalSwap(SourceTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceTable, tablespaceid_)
      + sizeof(SourceTable::tablespaceid_)
      - PROTOBUF_FIELD_OFFSET(SourceTable, tableid_)>(
          reinterpret_cast<char*>(&tableid_),
          reinterpret_cast<char*>(&other->tableid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[6]);
}

// ===================================================================

class ReadLogRequest::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ReadLogRequest* msg);
  static const ::tapdata::ReaderSource& source(const ReadLogRequest* msg);
  static const ::tapdata::WriterTarget& target(const ReadLogRequest* msg);
};

const ::tapdata::MessageHeader&
ReadLogRequest::_Internal::header(const ReadLogRequest* msg) {
  return *msg->header_;
}
const ::tapdata::ReaderSource&
ReadLogRequest::_Internal::source(const ReadLogRequest* msg) {
  return *msg->source_;
}
const ::tapdata::WriterTarget&
ReadLogRequest::_Internal::target(const ReadLogRequest* msg) {
  return *msg->target_;
}
ReadLogRequest::ReadLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ReadLogRequest)
}
ReadLogRequest::ReadLogRequest(const ReadLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  scn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scn().empty()) {
    scn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scn(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::tapdata::ReaderSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::tapdata::WriterTarget(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&stime_, &from.stime_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeback_) -
    reinterpret_cast<char*>(&stime_)) + sizeof(timeback_));
  // @@protoc_insertion_point(copy_constructor:tapdata.ReadLogRequest)
}

void ReadLogRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeback_) -
    reinterpret_cast<char*>(&header_)) + sizeof(timeback_));
}

ReadLogRequest::~ReadLogRequest() {
  // @@protoc_insertion_point(destructor:tapdata.ReadLogRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void ReadLogRequest::ArenaDtor(void* object) {
  ReadLogRequest* _this = reinterpret_cast< ReadLogRequest* >(object);
  (void)_this;
}
void ReadLogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ReadLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  id_.ClearToEmpty();
  scn_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  ::memset(&stime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeback_) -
      reinterpret_cast<char*>(&stime_)) + sizeof(timeback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bigEndian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bigendian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string scn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogRequest.scn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tapdata.SourceTable tables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ReaderSource source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.WriterTarget target = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cacheLri = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cachelri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeBack = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timeback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadLogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ReadLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool bigEndian = 2;
  if (this->_internal_bigendian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bigendian(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string scn = 4;
  if (!this->_internal_scn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scn().data(), static_cast<int>(this->_internal_scn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogRequest.scn");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scn(), target);
  }

  // int64 stime = 5;
  if (this->_internal_stime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_stime(), target);
  }

  // repeated .tapdata.SourceTable tables = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tables(i), target, stream);
  }

  // .tapdata.ReaderSource source = 7;
  if (this->_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::source(this), target, stream);
  }

  // .tapdata.WriterTarget target = 8;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::target(this), target, stream);
  }

  // bool cacheLri = 9;
  if (this->_internal_cachelri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_cachelri(), target);
  }

  // int32 timeBack = 10;
  if (this->_internal_timeback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_timeback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ReadLogRequest)
  return target;
}

size_t ReadLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ReadLogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tapdata.SourceTable tables = 6;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string scn = 4;
  if (!this->_internal_scn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scn());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tapdata.ReaderSource source = 7;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .tapdata.WriterTarget target = 8;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // int64 stime = 5;
  if (this->_internal_stime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_stime());
  }

  // bool bigEndian = 2;
  if (this->_internal_bigendian() != 0) {
    total_size += 1 + 1;
  }

  // bool cacheLri = 9;
  if (this->_internal_cachelri() != 0) {
    total_size += 1 + 1;
  }

  // int32 timeBack = 10;
  if (this->_internal_timeback() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timeback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadLogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadLogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadLogRequest::GetClassData() const { return &_class_data_; }

void ReadLogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadLogRequest *>(to)->MergeFrom(
      static_cast<const ReadLogRequest &>(from));
}


void ReadLogRequest::MergeFrom(const ReadLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ReadLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_scn().empty()) {
    _internal_set_scn(from._internal_scn());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_source()) {
    _internal_mutable_source()->::tapdata::ReaderSource::MergeFrom(from._internal_source());
  }
  if (from._internal_has_target()) {
    _internal_mutable_target()->::tapdata::WriterTarget::MergeFrom(from._internal_target());
  }
  if (from._internal_stime() != 0) {
    _internal_set_stime(from._internal_stime());
  }
  if (from._internal_bigendian() != 0) {
    _internal_set_bigendian(from._internal_bigendian());
  }
  if (from._internal_cachelri() != 0) {
    _internal_set_cachelri(from._internal_cachelri());
  }
  if (from._internal_timeback() != 0) {
    _internal_set_timeback(from._internal_timeback());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadLogRequest::CopyFrom(const ReadLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ReadLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadLogRequest::IsInitialized() const {
  return true;
}

void ReadLogRequest::InternalSwap(ReadLogRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scn_, lhs_arena,
      &other->scn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadLogRequest, timeback_)
      + sizeof(ReadLogRequest::timeback_)
      - PROTOBUF_FIELD_OFFSET(ReadLogRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadLogRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[7]);
}

// ===================================================================

class TaskHandleRequest::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const TaskHandleRequest* msg);
};

const ::tapdata::MessageHeader&
TaskHandleRequest::_Internal::header(const TaskHandleRequest* msg) {
  return *msg->header_;
}
TaskHandleRequest::TaskHandleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.TaskHandleRequest)
}
TaskHandleRequest::TaskHandleRequest(const TaskHandleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapdata.TaskHandleRequest)
}

void TaskHandleRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

TaskHandleRequest::~TaskHandleRequest() {
  // @@protoc_insertion_point(destructor:tapdata.TaskHandleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskHandleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void TaskHandleRequest::ArenaDtor(void* object) {
  TaskHandleRequest* _this = reinterpret_cast< TaskHandleRequest* >(object);
  (void)_this;
}
void TaskHandleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskHandleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskHandleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.TaskHandleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskHandleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.TaskHandleRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskHandleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.TaskHandleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.TaskHandleRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.TaskHandleRequest)
  return target;
}

size_t TaskHandleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.TaskHandleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskHandleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskHandleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskHandleRequest::GetClassData() const { return &_class_data_; }

void TaskHandleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskHandleRequest *>(to)->MergeFrom(
      static_cast<const TaskHandleRequest &>(from));
}


void TaskHandleRequest::MergeFrom(const TaskHandleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.TaskHandleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskHandleRequest::CopyFrom(const TaskHandleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.TaskHandleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskHandleRequest::IsInitialized() const {
  return true;
}

void TaskHandleRequest::InternalSwap(TaskHandleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskHandleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[8]);
}

// ===================================================================

class ControlResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ControlResponse* msg);
};

const ::tapdata::MessageHeader&
ControlResponse::_Internal::header(const ControlResponse* msg) {
  return *msg->header_;
}
ControlResponse::ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ControlResponse)
}
ControlResponse::ControlResponse(const ControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tapdata.ControlResponse)
}

void ControlResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:tapdata.ControlResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ControlResponse::ArenaDtor(void* object) {
  ControlResponse* _this = reinterpret_cast< ControlResponse* >(object);
  (void)_this;
}
void ControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ResponseCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::tapdata::ResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ControlResponse.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ControlResponse.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ControlResponse)
  return target;
}

size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlResponse::GetClassData() const { return &_class_data_; }

void ControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlResponse *>(to)->MergeFrom(
      static_cast<const ControlResponse &>(from));
}


void ControlResponse::MergeFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlResponse::IsInitialized() const {
  return true;
}

void ControlResponse::InternalSwap(ControlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlResponse, code_)
      + sizeof(ControlResponse::code_)
      - PROTOBUF_FIELD_OFFSET(ControlResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[9]);
}

// ===================================================================

class ReadLogTaskState::_Internal {
 public:
};

ReadLogTaskState::ReadLogTaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ReadLogTaskState)
}
ReadLogTaskState::ReadLogTaskState(const ReadLogTaskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:tapdata.ReadLogTaskState)
}

void ReadLogTaskState::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_ = 0;
}

ReadLogTaskState::~ReadLogTaskState() {
  // @@protoc_insertion_point(destructor:tapdata.ReadLogTaskState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadLogTaskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadLogTaskState::ArenaDtor(void* object) {
  ReadLogTaskState* _this = reinterpret_cast< ReadLogTaskState* >(object);
  (void)_this;
}
void ReadLogTaskState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadLogTaskState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadLogTaskState::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ReadLogTaskState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadLogTaskState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogTaskState.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.TaskState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tapdata::TaskState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadLogTaskState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ReadLogTaskState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogTaskState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .tapdata.TaskState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ReadLogTaskState)
  return target;
}

size_t ReadLogTaskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ReadLogTaskState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tapdata.TaskState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadLogTaskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadLogTaskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadLogTaskState::GetClassData() const { return &_class_data_; }

void ReadLogTaskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadLogTaskState *>(to)->MergeFrom(
      static_cast<const ReadLogTaskState &>(from));
}


void ReadLogTaskState::MergeFrom(const ReadLogTaskState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ReadLogTaskState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadLogTaskState::CopyFrom(const ReadLogTaskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ReadLogTaskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadLogTaskState::IsInitialized() const {
  return true;
}

void ReadLogTaskState::InternalSwap(ReadLogTaskState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadLogTaskState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[10]);
}

// ===================================================================

class ListReadLogTaskStatesRequest::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ListReadLogTaskStatesRequest* msg);
};

const ::tapdata::MessageHeader&
ListReadLogTaskStatesRequest::_Internal::header(const ListReadLogTaskStatesRequest* msg) {
  return *msg->header_;
}
ListReadLogTaskStatesRequest::ListReadLogTaskStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ListReadLogTaskStatesRequest)
}
ListReadLogTaskStatesRequest::ListReadLogTaskStatesRequest(const ListReadLogTaskStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapdata.ListReadLogTaskStatesRequest)
}

void ListReadLogTaskStatesRequest::SharedCtor() {
header_ = nullptr;
}

ListReadLogTaskStatesRequest::~ListReadLogTaskStatesRequest() {
  // @@protoc_insertion_point(destructor:tapdata.ListReadLogTaskStatesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListReadLogTaskStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListReadLogTaskStatesRequest::ArenaDtor(void* object) {
  ListReadLogTaskStatesRequest* _this = reinterpret_cast< ListReadLogTaskStatesRequest* >(object);
  (void)_this;
}
void ListReadLogTaskStatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListReadLogTaskStatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListReadLogTaskStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ListReadLogTaskStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListReadLogTaskStatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReadLogTaskStatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ListReadLogTaskStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ListReadLogTaskStatesRequest)
  return target;
}

size_t ListReadLogTaskStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ListReadLogTaskStatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListReadLogTaskStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListReadLogTaskStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListReadLogTaskStatesRequest::GetClassData() const { return &_class_data_; }

void ListReadLogTaskStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListReadLogTaskStatesRequest *>(to)->MergeFrom(
      static_cast<const ListReadLogTaskStatesRequest &>(from));
}


void ListReadLogTaskStatesRequest::MergeFrom(const ListReadLogTaskStatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ListReadLogTaskStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListReadLogTaskStatesRequest::CopyFrom(const ListReadLogTaskStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ListReadLogTaskStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReadLogTaskStatesRequest::IsInitialized() const {
  return true;
}

void ListReadLogTaskStatesRequest::InternalSwap(ListReadLogTaskStatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReadLogTaskStatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[11]);
}

// ===================================================================

class ListReadLogTaskStatesResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ListReadLogTaskStatesResponse* msg);
};

const ::tapdata::MessageHeader&
ListReadLogTaskStatesResponse::_Internal::header(const ListReadLogTaskStatesResponse* msg) {
  return *msg->header_;
}
ListReadLogTaskStatesResponse::ListReadLogTaskStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  taskstate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ListReadLogTaskStatesResponse)
}
ListReadLogTaskStatesResponse::ListReadLogTaskStatesResponse(const ListReadLogTaskStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      taskstate_(from.taskstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tapdata.ListReadLogTaskStatesResponse)
}

void ListReadLogTaskStatesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

ListReadLogTaskStatesResponse::~ListReadLogTaskStatesResponse() {
  // @@protoc_insertion_point(destructor:tapdata.ListReadLogTaskStatesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListReadLogTaskStatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListReadLogTaskStatesResponse::ArenaDtor(void* object) {
  ListReadLogTaskStatesResponse* _this = reinterpret_cast< ListReadLogTaskStatesResponse* >(object);
  (void)_this;
}
void ListReadLogTaskStatesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListReadLogTaskStatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListReadLogTaskStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ListReadLogTaskStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskstate_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListReadLogTaskStatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ResponseCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::tapdata::ResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tapdata.ReadLogTaskState taskState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReadLogTaskStatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ListReadLogTaskStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // repeated .tapdata.ReadLogTaskState taskState = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_taskstate(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ListReadLogTaskStatesResponse)
  return target;
}

size_t ListReadLogTaskStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ListReadLogTaskStatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tapdata.ReadLogTaskState taskState = 3;
  total_size += 1UL * this->_internal_taskstate_size();
  for (const auto& msg : this->taskstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListReadLogTaskStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListReadLogTaskStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListReadLogTaskStatesResponse::GetClassData() const { return &_class_data_; }

void ListReadLogTaskStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListReadLogTaskStatesResponse *>(to)->MergeFrom(
      static_cast<const ListReadLogTaskStatesResponse &>(from));
}


void ListReadLogTaskStatesResponse::MergeFrom(const ListReadLogTaskStatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ListReadLogTaskStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taskstate_.MergeFrom(from.taskstate_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListReadLogTaskStatesResponse::CopyFrom(const ListReadLogTaskStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ListReadLogTaskStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReadLogTaskStatesResponse::IsInitialized() const {
  return true;
}

void ListReadLogTaskStatesResponse::InternalSwap(ListReadLogTaskStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  taskstate_.InternalSwap(&other->taskstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListReadLogTaskStatesResponse, code_)
      + sizeof(ListReadLogTaskStatesResponse::code_)
      - PROTOBUF_FIELD_OFFSET(ListReadLogTaskStatesResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReadLogTaskStatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[12]);
}

// ===================================================================

class GetReadLogTaskStateResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const GetReadLogTaskStateResponse* msg);
};

const ::tapdata::MessageHeader&
GetReadLogTaskStateResponse::_Internal::header(const GetReadLogTaskStateResponse* msg) {
  return *msg->header_;
}
GetReadLogTaskStateResponse::GetReadLogTaskStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  taskstate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.GetReadLogTaskStateResponse)
}
GetReadLogTaskStateResponse::GetReadLogTaskStateResponse(const GetReadLogTaskStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      taskstate_(from.taskstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tapdata.GetReadLogTaskStateResponse)
}

void GetReadLogTaskStateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

GetReadLogTaskStateResponse::~GetReadLogTaskStateResponse() {
  // @@protoc_insertion_point(destructor:tapdata.GetReadLogTaskStateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadLogTaskStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetReadLogTaskStateResponse::ArenaDtor(void* object) {
  GetReadLogTaskStateResponse* _this = reinterpret_cast< GetReadLogTaskStateResponse* >(object);
  (void)_this;
}
void GetReadLogTaskStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadLogTaskStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadLogTaskStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.GetReadLogTaskStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskstate_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadLogTaskStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ResponseCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::tapdata::ResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tapdata.ReadLogTaskState taskState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadLogTaskStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.GetReadLogTaskStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // repeated .tapdata.ReadLogTaskState taskState = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_taskstate(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.GetReadLogTaskStateResponse)
  return target;
}

size_t GetReadLogTaskStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.GetReadLogTaskStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tapdata.ReadLogTaskState taskState = 3;
  total_size += 1UL * this->_internal_taskstate_size();
  for (const auto& msg : this->taskstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadLogTaskStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadLogTaskStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadLogTaskStateResponse::GetClassData() const { return &_class_data_; }

void GetReadLogTaskStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadLogTaskStateResponse *>(to)->MergeFrom(
      static_cast<const GetReadLogTaskStateResponse &>(from));
}


void GetReadLogTaskStateResponse::MergeFrom(const GetReadLogTaskStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.GetReadLogTaskStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taskstate_.MergeFrom(from.taskstate_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadLogTaskStateResponse::CopyFrom(const GetReadLogTaskStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.GetReadLogTaskStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadLogTaskStateResponse::IsInitialized() const {
  return true;
}

void GetReadLogTaskStateResponse::InternalSwap(GetReadLogTaskStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  taskstate_.InternalSwap(&other->taskstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadLogTaskStateResponse, code_)
      + sizeof(GetReadLogTaskStateResponse::code_)
      - PROTOBUF_FIELD_OFFSET(GetReadLogTaskStateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadLogTaskStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[13]);
}

// ===================================================================

class ReadLogPayload::_Internal {
 public:
};

ReadLogPayload::ReadLogPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ReadLogPayload)
}
ReadLogPayload::ReadLogPayload(const ReadLogPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scn().empty()) {
    scn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scn(), 
      GetArenaForAllocation());
  }
  logbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logbytes().empty()) {
    logbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logbytes(), 
      GetArenaForAllocation());
  }
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionid().empty()) {
    transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transactionid(), 
      GetArenaForAllocation());
  }
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArenaForAllocation());
  }
  defaultschema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defaultschema().empty()) {
    defaultschema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_defaultschema(), 
      GetArenaForAllocation());
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema().empty()) {
    schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema(), 
      GetArenaForAllocation());
  }
  tablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tablename().empty()) {
    tablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tablename(), 
      GetArenaForAllocation());
  }
  beforelogbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_beforelogbytes().empty()) {
    beforelogbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beforelogbytes(), 
      GetArenaForAllocation());
  }
  pendingminscn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pendingminscn().empty()) {
    pendingminscn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pendingminscn(), 
      GetArenaForAllocation());
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&tablespaceid_) -
    reinterpret_cast<char*>(&op_)) + sizeof(tablespaceid_));
  // @@protoc_insertion_point(copy_constructor:tapdata.ReadLogPayload)
}

void ReadLogPayload::SharedCtor() {
scn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
defaultschema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
beforelogbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pendingminscn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tablespaceid_) -
    reinterpret_cast<char*>(&op_)) + sizeof(tablespaceid_));
}

ReadLogPayload::~ReadLogPayload() {
  // @@protoc_insertion_point(destructor:tapdata.ReadLogPayload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadLogPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logbytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultschema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tablename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  beforelogbytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pendingminscn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadLogPayload::ArenaDtor(void* object) {
  ReadLogPayload* _this = reinterpret_cast< ReadLogPayload* >(object);
  (void)_this;
}
void ReadLogPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadLogPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadLogPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ReadLogPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scn_.ClearToEmpty();
  logbytes_.ClearToEmpty();
  transactionid_.ClearToEmpty();
  rid_.ClearToEmpty();
  defaultschema_.ClearToEmpty();
  schema_.ClearToEmpty();
  tablename_.ClearToEmpty();
  beforelogbytes_.ClearToEmpty();
  pendingminscn_.ClearToEmpty();
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tablespaceid_) -
      reinterpret_cast<char*>(&op_)) + sizeof(tablespaceid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadLogPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.ReadLogOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::tapdata::ReadLogOp>(val));
        } else
          goto handle_unusual;
        continue;
      // string scn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.scn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes logBytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_logbytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 transactionTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transactiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transactionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.transactionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableSpaceId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tablespaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.rid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string defaultSchema = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_defaultschema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.defaultSchema"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string schema = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.schema"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tableName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_tablename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.tableName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes beforeLogBytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_beforelogbytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pendingMinScn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pendingminscn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogPayload.pendingMinScn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadLogPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ReadLogPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.ReadLogOp op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // string scn = 2;
  if (!this->_internal_scn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scn().data(), static_cast<int>(this->_internal_scn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.scn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scn(), target);
  }

  // bytes logBytes = 3;
  if (!this->_internal_logbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_logbytes(), target);
  }

  // int64 transactionTime = 4;
  if (this->_internal_transactiontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_transactiontime(), target);
  }

  // string transactionId = 5;
  if (!this->_internal_transactionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionid().data(), static_cast<int>(this->_internal_transactionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.transactionId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_transactionid(), target);
  }

  // int32 tableId = 6;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tableid(), target);
  }

  // int32 tableSpaceId = 7;
  if (this->_internal_tablespaceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_tablespaceid(), target);
  }

  // string rid = 8;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.rid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rid(), target);
  }

  // string defaultSchema = 9;
  if (!this->_internal_defaultschema().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultschema().data(), static_cast<int>(this->_internal_defaultschema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.defaultSchema");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_defaultschema(), target);
  }

  // string schema = 10;
  if (!this->_internal_schema().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema().data(), static_cast<int>(this->_internal_schema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.schema");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_schema(), target);
  }

  // string tableName = 11;
  if (!this->_internal_tablename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tablename().data(), static_cast<int>(this->_internal_tablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.tableName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_tablename(), target);
  }

  // bytes beforeLogBytes = 12;
  if (!this->_internal_beforelogbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_beforelogbytes(), target);
  }

  // string pendingMinScn = 13;
  if (!this->_internal_pendingminscn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pendingminscn().data(), static_cast<int>(this->_internal_pendingminscn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogPayload.pendingMinScn");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pendingminscn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ReadLogPayload)
  return target;
}

size_t ReadLogPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ReadLogPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scn = 2;
  if (!this->_internal_scn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scn());
  }

  // bytes logBytes = 3;
  if (!this->_internal_logbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_logbytes());
  }

  // string transactionId = 5;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionid());
  }

  // string rid = 8;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string defaultSchema = 9;
  if (!this->_internal_defaultschema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultschema());
  }

  // string schema = 10;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema());
  }

  // string tableName = 11;
  if (!this->_internal_tablename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tablename());
  }

  // bytes beforeLogBytes = 12;
  if (!this->_internal_beforelogbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_beforelogbytes());
  }

  // string pendingMinScn = 13;
  if (!this->_internal_pendingminscn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pendingminscn());
  }

  // .tapdata.ReadLogOp op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // int32 tableId = 6;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  // int64 transactionTime = 4;
  if (this->_internal_transactiontime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_transactiontime());
  }

  // int32 tableSpaceId = 7;
  if (this->_internal_tablespaceid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tablespaceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadLogPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadLogPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadLogPayload::GetClassData() const { return &_class_data_; }

void ReadLogPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadLogPayload *>(to)->MergeFrom(
      static_cast<const ReadLogPayload &>(from));
}


void ReadLogPayload::MergeFrom(const ReadLogPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ReadLogPayload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_scn().empty()) {
    _internal_set_scn(from._internal_scn());
  }
  if (!from._internal_logbytes().empty()) {
    _internal_set_logbytes(from._internal_logbytes());
  }
  if (!from._internal_transactionid().empty()) {
    _internal_set_transactionid(from._internal_transactionid());
  }
  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_defaultschema().empty()) {
    _internal_set_defaultschema(from._internal_defaultschema());
  }
  if (!from._internal_schema().empty()) {
    _internal_set_schema(from._internal_schema());
  }
  if (!from._internal_tablename().empty()) {
    _internal_set_tablename(from._internal_tablename());
  }
  if (!from._internal_beforelogbytes().empty()) {
    _internal_set_beforelogbytes(from._internal_beforelogbytes());
  }
  if (!from._internal_pendingminscn().empty()) {
    _internal_set_pendingminscn(from._internal_pendingminscn());
  }
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from._internal_transactiontime() != 0) {
    _internal_set_transactiontime(from._internal_transactiontime());
  }
  if (from._internal_tablespaceid() != 0) {
    _internal_set_tablespaceid(from._internal_tablespaceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadLogPayload::CopyFrom(const ReadLogPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ReadLogPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadLogPayload::IsInitialized() const {
  return true;
}

void ReadLogPayload::InternalSwap(ReadLogPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scn_, lhs_arena,
      &other->scn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logbytes_, lhs_arena,
      &other->logbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transactionid_, lhs_arena,
      &other->transactionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &defaultschema_, lhs_arena,
      &other->defaultschema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_, lhs_arena,
      &other->schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tablename_, lhs_arena,
      &other->tablename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &beforelogbytes_, lhs_arena,
      &other->beforelogbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pendingminscn_, lhs_arena,
      &other->pendingminscn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadLogPayload, tablespaceid_)
      + sizeof(ReadLogPayload::tablespaceid_)
      - PROTOBUF_FIELD_OFFSET(ReadLogPayload, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadLogPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[14]);
}

// ===================================================================

class ReadLogResponse::_Internal {
 public:
  static const ::tapdata::MessageHeader& header(const ReadLogResponse* msg);
};

const ::tapdata::MessageHeader&
ReadLogResponse::_Internal::header(const ReadLogResponse* msg) {
  return *msg->header_;
}
ReadLogResponse::ReadLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  payload_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.ReadLogResponse)
}
ReadLogResponse::ReadLogResponse(const ReadLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payloadversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payloadversion().empty()) {
    payloadversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payloadversion(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::tapdata::MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:tapdata.ReadLogResponse)
}

void ReadLogResponse::SharedCtor() {
payloadversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

ReadLogResponse::~ReadLogResponse() {
  // @@protoc_insertion_point(destructor:tapdata.ReadLogResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payloadversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ReadLogResponse::ArenaDtor(void* object) {
  ReadLogResponse* _this = reinterpret_cast< ReadLogResponse* >(object);
  (void)_this;
}
void ReadLogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.ReadLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  payloadversion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ResponseCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::tapdata::ResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string payloadVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payloadversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.ReadLogResponse.payloadVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tapdata.ReadLogPayload payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payload(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadLogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.ReadLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // string payloadVersion = 3;
  if (!this->_internal_payloadversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payloadversion().data(), static_cast<int>(this->_internal_payloadversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.ReadLogResponse.payloadVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payloadversion(), target);
  }

  // repeated .tapdata.ReadLogPayload payload = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payload_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_payload(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.ReadLogResponse)
  return target;
}

size_t ReadLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.ReadLogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tapdata.ReadLogPayload payload = 4;
  total_size += 1UL * this->_internal_payload_size();
  for (const auto& msg : this->payload_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string payloadVersion = 3;
  if (!this->_internal_payloadversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payloadversion());
  }

  // .tapdata.MessageHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tapdata.ResponseCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadLogResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadLogResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadLogResponse::GetClassData() const { return &_class_data_; }

void ReadLogResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadLogResponse *>(to)->MergeFrom(
      static_cast<const ReadLogResponse &>(from));
}


void ReadLogResponse::MergeFrom(const ReadLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.ReadLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
  if (!from._internal_payloadversion().empty()) {
    _internal_set_payloadversion(from._internal_payloadversion());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::tapdata::MessageHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadLogResponse::CopyFrom(const ReadLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.ReadLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadLogResponse::IsInitialized() const {
  return true;
}

void ReadLogResponse::InternalSwap(ReadLogResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  payload_.InternalSwap(&other->payload_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payloadversion_, lhs_arena,
      &other->payloadversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadLogResponse, code_)
      + sizeof(ReadLogResponse::code_)
      - PROTOBUF_FIELD_OFFSET(ReadLogResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadLogResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[15]);
}

// ===================================================================

class PushReadLogResponse::_Internal {
 public:
};

PushReadLogResponse::PushReadLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.PushReadLogResponse)
}
PushReadLogResponse::PushReadLogResponse(const PushReadLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&waittimems_) -
    reinterpret_cast<char*>(&code_)) + sizeof(waittimems_));
  // @@protoc_insertion_point(copy_constructor:tapdata.PushReadLogResponse)
}

void PushReadLogResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&waittimems_) -
    reinterpret_cast<char*>(&code_)) + sizeof(waittimems_));
}

PushReadLogResponse::~PushReadLogResponse() {
  // @@protoc_insertion_point(destructor:tapdata.PushReadLogResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushReadLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushReadLogResponse::ArenaDtor(void* object) {
  PushReadLogResponse* _this = reinterpret_cast< PushReadLogResponse* >(object);
  (void)_this;
}
void PushReadLogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushReadLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushReadLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.PushReadLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittimems_) -
      reinterpret_cast<char*>(&code_)) + sizeof(waittimems_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushReadLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tapdata.PushResponseCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::tapdata::PushResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 waitTimeMS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waittimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushReadLogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.PushReadLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tapdata.PushResponseCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // int32 waitTimeMS = 2;
  if (this->_internal_waittimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_waittimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.PushReadLogResponse)
  return target;
}

size_t PushReadLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.PushReadLogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tapdata.PushResponseCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // int32 waitTimeMS = 2;
  if (this->_internal_waittimems() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_waittimems());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushReadLogResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushReadLogResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushReadLogResponse::GetClassData() const { return &_class_data_; }

void PushReadLogResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushReadLogResponse *>(to)->MergeFrom(
      static_cast<const PushReadLogResponse &>(from));
}


void PushReadLogResponse::MergeFrom(const PushReadLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.PushReadLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_waittimems() != 0) {
    _internal_set_waittimems(from._internal_waittimems());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushReadLogResponse::CopyFrom(const PushReadLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.PushReadLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushReadLogResponse::IsInitialized() const {
  return true;
}

void PushReadLogResponse::InternalSwap(PushReadLogResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushReadLogResponse, waittimems_)
      + sizeof(PushReadLogResponse::waittimems_)
      - PROTOBUF_FIELD_OFFSET(PushReadLogResponse, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushReadLogResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[16]);
}

// ===================================================================

class PushReadLogRequest::_Internal {
 public:
  static const ::tapdata::ReadLogResponse& logresponse(const PushReadLogRequest* msg);
};

const ::tapdata::ReadLogResponse&
PushReadLogRequest::_Internal::logresponse(const PushReadLogRequest* msg) {
  return *msg->logresponse_;
}
PushReadLogRequest::PushReadLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tapdata.PushReadLogRequest)
}
PushReadLogRequest::PushReadLogRequest(const PushReadLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_logresponse()) {
    logresponse_ = new ::tapdata::ReadLogResponse(*from.logresponse_);
  } else {
    logresponse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapdata.PushReadLogRequest)
}

void PushReadLogRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logresponse_ = nullptr;
}

PushReadLogRequest::~PushReadLogRequest() {
  // @@protoc_insertion_point(destructor:tapdata.PushReadLogRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushReadLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete logresponse_;
}

void PushReadLogRequest::ArenaDtor(void* object) {
  PushReadLogRequest* _this = reinterpret_cast< PushReadLogRequest* >(object);
  (void)_this;
}
void PushReadLogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushReadLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushReadLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tapdata.PushReadLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && logresponse_ != nullptr) {
    delete logresponse_;
  }
  logresponse_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushReadLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapdata.PushReadLogRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tapdata.ReadLogResponse logResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushReadLogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapdata.PushReadLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tapdata.PushReadLogRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .tapdata.ReadLogResponse logResponse = 2;
  if (this->_internal_has_logresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapdata.PushReadLogRequest)
  return target;
}

size_t PushReadLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapdata.PushReadLogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tapdata.ReadLogResponse logResponse = 2;
  if (this->_internal_has_logresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logresponse_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushReadLogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushReadLogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushReadLogRequest::GetClassData() const { return &_class_data_; }

void PushReadLogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushReadLogRequest *>(to)->MergeFrom(
      static_cast<const PushReadLogRequest &>(from));
}


void PushReadLogRequest::MergeFrom(const PushReadLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapdata.PushReadLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_logresponse()) {
    _internal_mutable_logresponse()->::tapdata::ReadLogResponse::MergeFrom(from._internal_logresponse());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushReadLogRequest::CopyFrom(const PushReadLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapdata.PushReadLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushReadLogRequest::IsInitialized() const {
  return true;
}

void PushReadLogRequest::InternalSwap(PushReadLogRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(logresponse_, other->logresponse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushReadLogRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DB2PlugInDataSource_2eproto_getter, &descriptor_table_DB2PlugInDataSource_2eproto_once,
      file_level_metadata_DB2PlugInDataSource_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tapdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tapdata::MessageHeader* Arena::CreateMaybeMessage< ::tapdata::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::PingRequest* Arena::CreateMaybeMessage< ::tapdata::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::PingResponse* Arena::CreateMaybeMessage< ::tapdata::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ServerInfoResponse* Arena::CreateMaybeMessage< ::tapdata::ServerInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ServerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ReaderSource* Arena::CreateMaybeMessage< ::tapdata::ReaderSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ReaderSource >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::WriterTarget* Arena::CreateMaybeMessage< ::tapdata::WriterTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::WriterTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::SourceTable* Arena::CreateMaybeMessage< ::tapdata::SourceTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::SourceTable >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ReadLogRequest* Arena::CreateMaybeMessage< ::tapdata::ReadLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ReadLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::TaskHandleRequest* Arena::CreateMaybeMessage< ::tapdata::TaskHandleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::TaskHandleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ControlResponse* Arena::CreateMaybeMessage< ::tapdata::ControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ReadLogTaskState* Arena::CreateMaybeMessage< ::tapdata::ReadLogTaskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ReadLogTaskState >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ListReadLogTaskStatesRequest* Arena::CreateMaybeMessage< ::tapdata::ListReadLogTaskStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ListReadLogTaskStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ListReadLogTaskStatesResponse* Arena::CreateMaybeMessage< ::tapdata::ListReadLogTaskStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ListReadLogTaskStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::GetReadLogTaskStateResponse* Arena::CreateMaybeMessage< ::tapdata::GetReadLogTaskStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::GetReadLogTaskStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ReadLogPayload* Arena::CreateMaybeMessage< ::tapdata::ReadLogPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ReadLogPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::ReadLogResponse* Arena::CreateMaybeMessage< ::tapdata::ReadLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::ReadLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::PushReadLogResponse* Arena::CreateMaybeMessage< ::tapdata::PushReadLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::PushReadLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tapdata::PushReadLogRequest* Arena::CreateMaybeMessage< ::tapdata::PushReadLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapdata::PushReadLogRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
