// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DB2PlugInDataSource.proto
#ifndef GRPC_DB2PlugInDataSource_2eproto__INCLUDED
#define GRPC_DB2PlugInDataSource_2eproto__INCLUDED

#include "DB2PlugInDataSource.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tapdata {

class DB2ReadLogServer final {
 public:
  static constexpr char const* service_full_name() {
    return "tapdata.DB2ReadLogServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::tapdata::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::tapdata::ServerInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>> AsyncServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>>(AsyncServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>> PrepareAsyncServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>>(PrepareAsyncServerInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::tapdata::ControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> AsyncCreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(AsyncCreateReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> PrepareAsyncCreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(PrepareAsyncCreateReadLogTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> AsyncDeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(AsyncDeleteReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> PrepareAsyncDeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(PrepareAsyncDeleteReadLogTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> AsyncPauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(AsyncPauseReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> PrepareAsyncPauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(PrepareAsyncPauseReadLogTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> AsyncResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(AsyncResumeReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>> PrepareAsyncResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>>(PrepareAsyncResumeReadLogTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::tapdata::ListReadLogTaskStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>> AsyncListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>>(AsyncListReadLogTaskStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>> PrepareAsyncListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>>(PrepareAsyncListReadLogTaskStatesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::GetReadLogTaskStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>> AsyncGetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>>(AsyncGetReadLogTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>> PrepareAsyncGetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>>(PrepareAsyncGetReadLogTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tapdata::ReadLogResponse>> PullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tapdata::ReadLogResponse>>(PullReadLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>> AsyncPullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>>(AsyncPullReadLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>> PrepareAsyncPullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>>(PrepareAsyncPullReadLogRaw(context, request, cq));
    }
    virtual ::grpc::Status PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::tapdata::PushReadLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>> AsyncPushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>>(AsyncPushReadLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>> PrepareAsyncPushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>>(PrepareAsyncPushReadLogRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::grpc::ClientReadReactor< ::tapdata::ReadLogResponse>* reactor) = 0;
      virtual void PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>* AsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ServerInfoResponse>* PrepareAsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* AsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* PrepareAsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* AsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* PrepareAsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* AsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* PrepareAsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* AsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ControlResponse>* PrepareAsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>* AsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::ListReadLogTaskStatesResponse>* PrepareAsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>* AsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::GetReadLogTaskStateResponse>* PrepareAsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tapdata::ReadLogResponse>* PullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>* AsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tapdata::ReadLogResponse>* PrepareAsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>* AsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tapdata::PushReadLogResponse>* PrepareAsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::tapdata::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::tapdata::ServerInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>> AsyncServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>>(AsyncServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>> PrepareAsyncServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>>(PrepareAsyncServerInfoRaw(context, request, cq));
    }
    ::grpc::Status CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::tapdata::ControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> AsyncCreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(AsyncCreateReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> PrepareAsyncCreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(PrepareAsyncCreateReadLogTaskRaw(context, request, cq));
    }
    ::grpc::Status DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> AsyncDeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(AsyncDeleteReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> PrepareAsyncDeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(PrepareAsyncDeleteReadLogTaskRaw(context, request, cq));
    }
    ::grpc::Status PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> AsyncPauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(AsyncPauseReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> PrepareAsyncPauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(PrepareAsyncPauseReadLogTaskRaw(context, request, cq));
    }
    ::grpc::Status ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::ControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> AsyncResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(AsyncResumeReadLogTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>> PrepareAsyncResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>>(PrepareAsyncResumeReadLogTaskRaw(context, request, cq));
    }
    ::grpc::Status ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::tapdata::ListReadLogTaskStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>> AsyncListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>>(AsyncListReadLogTaskStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>> PrepareAsyncListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>>(PrepareAsyncListReadLogTaskStatesRaw(context, request, cq));
    }
    ::grpc::Status GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::tapdata::GetReadLogTaskStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>> AsyncGetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>>(AsyncGetReadLogTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>> PrepareAsyncGetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>>(PrepareAsyncGetReadLogTaskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tapdata::ReadLogResponse>> PullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tapdata::ReadLogResponse>>(PullReadLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>> AsyncPullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>>(AsyncPullReadLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>> PrepareAsyncPullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>>(PrepareAsyncPullReadLogRaw(context, request, cq));
    }
    ::grpc::Status PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::tapdata::PushReadLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>> AsyncPushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>>(AsyncPushReadLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>> PrepareAsyncPushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>>(PrepareAsyncPushReadLogRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateReadLogTask(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) override;
      void PauseReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, std::function<void(::grpc::Status)>) override;
      void ResumeReadLogTask(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListReadLogTaskStates(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetReadLogTaskState(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PullReadLog(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest* request, ::grpc::ClientReadReactor< ::tapdata::ReadLogResponse>* reactor) override;
      void PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, std::function<void(::grpc::Status)>) override;
      void PushReadLog(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::tapdata::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>* AsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ServerInfoResponse>* PrepareAsyncServerInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* AsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* PrepareAsyncCreateReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::ReadLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* AsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* PrepareAsyncDeleteReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* AsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* PrepareAsyncPauseReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* AsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ControlResponse>* PrepareAsyncResumeReadLogTaskRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>* AsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::ListReadLogTaskStatesResponse>* PrepareAsyncListReadLogTaskStatesRaw(::grpc::ClientContext* context, const ::tapdata::ListReadLogTaskStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>* AsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::GetReadLogTaskStateResponse>* PrepareAsyncGetReadLogTaskStateRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tapdata::ReadLogResponse>* PullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request) override;
    ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>* AsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tapdata::ReadLogResponse>* PrepareAsyncPullReadLogRaw(::grpc::ClientContext* context, const ::tapdata::TaskHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>* AsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tapdata::PushReadLogResponse>* PrepareAsyncPushReadLogRaw(::grpc::ClientContext* context, const ::tapdata::PushReadLogRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateReadLogTask_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteReadLogTask_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseReadLogTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ResumeReadLogTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ListReadLogTaskStates_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReadLogTaskState_;
    const ::grpc::internal::RpcMethod rpcmethod_PullReadLog_;
    const ::grpc::internal::RpcMethod rpcmethod_PushReadLog_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response);
    virtual ::grpc::Status ServerInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response);
    virtual ::grpc::Status CreateReadLogTask(::grpc::ServerContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response);
    virtual ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response);
    virtual ::grpc::Status PauseReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response);
    virtual ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response);
    virtual ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response);
    virtual ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response);
    virtual ::grpc::Status PullReadLog(::grpc::ServerContext* context, const ::tapdata::TaskHandleRequest* request, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* writer);
    virtual ::grpc::Status PushReadLog(::grpc::ServerContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::tapdata::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerInfo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ServerInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReadLogTask(::grpc::ServerContext* context, ::tapdata::ReadLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReadLogTask(::grpc::ServerContext* context, ::tapdata::TaskHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseReadLogTask(::grpc::ServerContext* context, ::tapdata::TaskHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeReadLogTask(::grpc::ServerContext* context, ::tapdata::TaskHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReadLogTaskStates(::grpc::ServerContext* context, ::tapdata::ListReadLogTaskStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::ListReadLogTaskStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReadLogTaskState(::grpc::ServerContext* context, ::tapdata::TaskHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::GetReadLogTaskStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullReadLog() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullReadLog(::grpc::ServerContext* context, ::tapdata::TaskHandleRequest* request, ::grpc::ServerAsyncWriter< ::tapdata::ReadLogResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushReadLog() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushReadLog(::grpc::ServerContext* context, ::tapdata::PushReadLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::tapdata::PushReadLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_ServerInfo<WithAsyncMethod_CreateReadLogTask<WithAsyncMethod_DeleteReadLogTask<WithAsyncMethod_PauseReadLogTask<WithAsyncMethod_ResumeReadLogTask<WithAsyncMethod_ListReadLogTaskStates<WithAsyncMethod_GetReadLogTaskState<WithAsyncMethod_PullReadLog<WithAsyncMethod_PushReadLog<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::PingRequest, ::tapdata::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::PingRequest* request, ::tapdata::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::tapdata::PingRequest, ::tapdata::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::PingRequest, ::tapdata::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::tapdata::ServerInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::tapdata::ServerInfoResponse* response) { return this->ServerInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ServerInfo(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::tapdata::ServerInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::tapdata::ServerInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::ReadLogRequest, ::tapdata::ControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::ReadLogRequest* request, ::tapdata::ControlResponse* response) { return this->CreateReadLogTask(context, request, response); }));}
    void SetMessageAllocatorFor_CreateReadLogTask(
        ::grpc::MessageAllocator< ::tapdata::ReadLogRequest, ::tapdata::ControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::ReadLogRequest, ::tapdata::ControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) { return this->DeleteReadLogTask(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteReadLogTask(
        ::grpc::MessageAllocator< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) { return this->PauseReadLogTask(context, request, response); }));}
    void SetMessageAllocatorFor_PauseReadLogTask(
        ::grpc::MessageAllocator< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::ControlResponse* response) { return this->ResumeReadLogTask(context, request, response); }));}
    void SetMessageAllocatorFor_ResumeReadLogTask(
        ::grpc::MessageAllocator< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResumeReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::ListReadLogTaskStatesRequest* request, ::tapdata::ListReadLogTaskStatesResponse* response) { return this->ListReadLogTaskStates(context, request, response); }));}
    void SetMessageAllocatorFor_ListReadLogTaskStates(
        ::grpc::MessageAllocator< ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListReadLogTaskStates(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::TaskHandleRequest* request, ::tapdata::GetReadLogTaskStateResponse* response) { return this->GetReadLogTaskState(context, request, response); }));}
    void SetMessageAllocatorFor_GetReadLogTaskState(
        ::grpc::MessageAllocator< ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetReadLogTaskState(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullReadLog() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tapdata::TaskHandleRequest, ::tapdata::ReadLogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::TaskHandleRequest* request) { return this->PullReadLog(context, request); }));
    }
    ~WithCallbackMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tapdata::ReadLogResponse>* PullReadLog(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushReadLog() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tapdata::PushReadLogRequest* request, ::tapdata::PushReadLogResponse* response) { return this->PushReadLog(context, request, response); }));}
    void SetMessageAllocatorFor_PushReadLog(
        ::grpc::MessageAllocator< ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushReadLog(
      ::grpc::CallbackServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_ServerInfo<WithCallbackMethod_CreateReadLogTask<WithCallbackMethod_DeleteReadLogTask<WithCallbackMethod_PauseReadLogTask<WithCallbackMethod_ResumeReadLogTask<WithCallbackMethod_ListReadLogTaskStates<WithCallbackMethod_GetReadLogTaskState<WithCallbackMethod_PullReadLog<WithCallbackMethod_PushReadLog<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullReadLog() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushReadLog() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateReadLogTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteReadLogTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseReadLogTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeReadLogTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReadLogTaskStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReadLogTaskState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullReadLog() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullReadLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushReadLog() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushReadLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateReadLogTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteReadLogTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseReadLogTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResumeReadLogTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResumeReadLogTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListReadLogTaskStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListReadLogTaskStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetReadLogTaskState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetReadLogTaskState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullReadLog() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->PullReadLog(context, request); }));
    }
    ~WithRawCallbackMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PullReadLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushReadLog() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushReadLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushReadLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::PingRequest, ::tapdata::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::PingRequest, ::tapdata::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tapdata::PingRequest* /*request*/, ::tapdata::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::PingRequest,::tapdata::PingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::tapdata::ServerInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::tapdata::ServerInfoResponse>* streamer) {
                       return this->StreamedServerInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::tapdata::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::tapdata::ServerInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateReadLogTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::ReadLogRequest, ::tapdata::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::ReadLogRequest, ::tapdata::ControlResponse>* streamer) {
                       return this->StreamedCreateReadLogTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::ReadLogRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateReadLogTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::ReadLogRequest,::tapdata::ControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteReadLogTask() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* streamer) {
                       return this->StreamedDeleteReadLogTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteReadLogTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::TaskHandleRequest,::tapdata::ControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseReadLogTask() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* streamer) {
                       return this->StreamedPauseReadLogTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PauseReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseReadLogTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::TaskHandleRequest,::tapdata::ControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResumeReadLogTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResumeReadLogTask() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::TaskHandleRequest, ::tapdata::ControlResponse>* streamer) {
                       return this->StreamedResumeReadLogTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResumeReadLogTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResumeReadLogTask(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResumeReadLogTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::TaskHandleRequest,::tapdata::ControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListReadLogTaskStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListReadLogTaskStates() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::ListReadLogTaskStatesRequest, ::tapdata::ListReadLogTaskStatesResponse>* streamer) {
                       return this->StreamedListReadLogTaskStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListReadLogTaskStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListReadLogTaskStates(::grpc::ServerContext* /*context*/, const ::tapdata::ListReadLogTaskStatesRequest* /*request*/, ::tapdata::ListReadLogTaskStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListReadLogTaskStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::ListReadLogTaskStatesRequest,::tapdata::ListReadLogTaskStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetReadLogTaskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetReadLogTaskState() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::TaskHandleRequest, ::tapdata::GetReadLogTaskStateResponse>* streamer) {
                       return this->StreamedGetReadLogTaskState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetReadLogTaskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReadLogTaskState(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::tapdata::GetReadLogTaskStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetReadLogTaskState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::TaskHandleRequest,::tapdata::GetReadLogTaskStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushReadLog() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tapdata::PushReadLogRequest, ::tapdata::PushReadLogResponse>* streamer) {
                       return this->StreamedPushReadLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::PushReadLogRequest* /*request*/, ::tapdata::PushReadLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushReadLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tapdata::PushReadLogRequest,::tapdata::PushReadLogResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_ServerInfo<WithStreamedUnaryMethod_CreateReadLogTask<WithStreamedUnaryMethod_DeleteReadLogTask<WithStreamedUnaryMethod_PauseReadLogTask<WithStreamedUnaryMethod_ResumeReadLogTask<WithStreamedUnaryMethod_ListReadLogTaskStates<WithStreamedUnaryMethod_GetReadLogTaskState<WithStreamedUnaryMethod_PushReadLog<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PullReadLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PullReadLog() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tapdata::TaskHandleRequest, ::tapdata::ReadLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tapdata::TaskHandleRequest, ::tapdata::ReadLogResponse>* streamer) {
                       return this->StreamedPullReadLog(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PullReadLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullReadLog(::grpc::ServerContext* /*context*/, const ::tapdata::TaskHandleRequest* /*request*/, ::grpc::ServerWriter< ::tapdata::ReadLogResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPullReadLog(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tapdata::TaskHandleRequest,::tapdata::ReadLogResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PullReadLog<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_ServerInfo<WithStreamedUnaryMethod_CreateReadLogTask<WithStreamedUnaryMethod_DeleteReadLogTask<WithStreamedUnaryMethod_PauseReadLogTask<WithStreamedUnaryMethod_ResumeReadLogTask<WithStreamedUnaryMethod_ListReadLogTaskStates<WithStreamedUnaryMethod_GetReadLogTaskState<WithSplitStreamingMethod_PullReadLog<WithStreamedUnaryMethod_PushReadLog<Service > > > > > > > > > > StreamedService;
};

}  // namespace tapdata


#endif  // GRPC_DB2PlugInDataSource_2eproto__INCLUDED
